import{Match}from"../index.mjs";const{default:getModule}=await import("./engine.mjs");const{ccall}=await getModule();class Regex{constructor(pcre){this.pcre=pcre}pcre;matches(text){let prevEnd=0;const res=[];for(;;){const match=ccall("pcre_next_match","matches",["pcre","string","number"],[this.pcre,text,prevEnd]);if(!ccall("match_some","boolean",["match"],[match])){break}const start=ccall("match_get_start","number",["match"],[match]);const end=ccall("match_get_end","number",["match"],[match]);ccall("match_drop",null,["match"],[match]);res.push(new Match(start,end));prevEnd=end+(start===end)}return res}drop(){ccall("pcre_drop",null,["pcre"],[this.pcre])}}class Engine{compile(regex){const compileRes=ccall("compile","compile_res",["string"],[regex]);if(!ccall("compile_res_ok","boolean",["compile_res"],[compileRes])){const errorString=ccall("compile_res_unwrap_err","string",["compile_res"],[compileRes]);throw new SyntaxError(errorString)}return new Regex(ccall("compile_res_unwrap","pcre",["compile_res"],[compileRes]))}drop(){ccall("drop")}}export const engine=new Engine;